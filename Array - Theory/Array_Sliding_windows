What is Sliding Window?

The Sliding Window technique is a method used to optimize problems that involve subarrays or substrings — that is, contiguous elements in a sequence.

Instead of recalculating results for each subarray from scratch, we reuse the previous computation by moving (sliding) a window across the array.

Intuition

Imagine you have a fixed-size "window" that covers a few elements in the array.
Each time you move this window by one position to the right:

A new element enters the window (from the right).

An old element leaves the window (from the left).

We can update our result using only those two elements instead of recalculating everything.

Example Problem

Find the maximum sum of any subarray of size k.

Input
arr = [1, 3, 2, 5, 4, 6, 1]
k = 3

Naive Approach (Inefficient)

We calculate the sum of every subarray of size 3:

[1, 3, 2] = 6  
[3, 2, 5] = 10  
[2, 5, 4] = 11  
[5, 4, 6] = 15  
[4, 6, 1] = 11


Each subarray sum requires 3 additions.
For n elements, this is O(n * k) time.

Sliding Window Approach (Efficient)

We can do this in O(n) time.

Step 1: Start with the first window
window_sum = 1 + 3 + 2 = 6
max_sum = 6

Step 2: Slide the window one element at a time

For each new position:

Subtract the element that left the window.

Add the element that entered the window.

Move 1: [3, 2, 5] → window_sum = 6 - 1 + 5 = 10
Move 2: [2, 5, 4] → window_sum = 10 - 3 + 4 = 11
Move 3: [5, 4, 6] → window_sum = 11 - 2 + 6 = 15
Move 4: [4, 6, 1] → window_sum = 15 - 5 + 1 = 11


The maximum sum found = 15
