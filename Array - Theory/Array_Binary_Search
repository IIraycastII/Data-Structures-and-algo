BINARY SEARCH

Definition:
Binary search is an efficient algorithm to find an element in a sorted array.
It works by repeatedly dividing the search interval in half instead of checking each element one by one.

Step-by-step logic

Suppose you have:

arr = [1, 3, 5, 7, 9, 11, 13]
target = 9


Start with two pointers:
left = 0, right = len(arr) - 1

Find the middle index:
mid = (left + right) // 2

Compare arr[mid] with the target:

If arr[mid] == target: element found

If arr[mid] < target: search in the right half (left = mid + 1)

If arr[mid] > target: search in the left half (right = mid - 1)

Repeat steps 2â€“3 until left > right, meaning the element is not present.

Example code
def binary_search(arr, target):
    left = 0
    right = len(arr) - 1

    while left <= right:
        mid = (left + right) // 2

        if arr[mid] == target:
            return mid  # element found
        elif arr[mid] < target:
            left = mid + 1
        else:
            right = mid - 1

    return -1  # element not found


arr = [1, 3, 5, 7, 9, 11, 13]
print(binary_search(arr, 9))   # Output: 4
print(binary_search(arr, 2))   # Output: -1

Time Complexity

Best case: O(1) (element is in the middle)

Average / Worst case: O(log n)

Space Complexity

O(1) (iterative approach uses constant space)
